import React, { Component } from 'react';
import PropTypes from 'prop-types';
import TextField from '@material-ui/core/TextField';
import Tooltip from '@material-ui/core/Tooltip';
import Fab from '@material-ui/core/Fab';
import AddIcon from '@material-ui/icons/Add';
import Chip from '@material-ui/core/Chip';
import { withStyles } from '@material-ui/core';
import Button from '@material-ui/core/Button';
import FormControl from '@material-ui/core/FormControl';
import trim from '@tinkoff/utils/string/trim';
import remove from '@tinkoff/utils/array/remove';
import AutoRenew from '@material-ui/icons/AutorenewRounded';

import noop from '@tinkoff/utils/function/noop';

const GREY = '#e0e0e0';
const materialStyles = () => ({
    metaContainer: {
        width: '100%'
    },
    metaForm: {
        width: '100%',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
    },
    metaAdd: {
        marginLeft: '12px',
        marginTop: '8px'
    },
    metaAddKeywords: {
        width: '100%',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
    },
    metaKeyword: {
        margin: '4px',
        marginBottom: '20px'
    },
    metaAddTitleDescription: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
    }
});

class MetaForm extends Component {
    static propTypes = {
        classes: PropTypes.object.isRequired,
        metaTitle: PropTypes.string,
        metaDescription: PropTypes.string,
        metaKeywords: PropTypes.string,
        metaAutoGenerate: PropTypes.object.isRequired,
        getAutoGenerateTitle: PropTypes.func.isRequired,
        getAutoGenerateDescription: PropTypes.func.isRequired,
        getAutoGenerateKeywords: PropTypes.func.isRequired,
        onSubmit: PropTypes.func.isRequired
    };

    static defaultProps = {
        metaTitle: '',
        metaDescription: '',
        metaKeywords: '',
        getAutoGenerateTitle: noop,
        getAutoGenerateDescription: noop,
        getAutoGenerateKeywords: noop,
        onSubmit: noop
    };

    constructor (...args) {
        super(...args);

        const { metaTitle, metaDescription, metaKeywords } = this.props;

        this.state = {
            metaTitle,
            metaDescription,
            metaKeywords,
            metaKeywordsInput: '',
            isLoading: false
        };
    }

    componentWillReceiveProps (nextProps) {
        const { metaTitle, metaDescription, metaKeywords } = this.props;

        if (nextProps.metaTitle !== metaTitle || nextProps.metaDescription !== metaDescription || nextProps.metaKeywords !== metaKeywords) {
            this.setState({
                metaTitle: nextProps.metaTitle,
                metaDescription: nextProps.metaDescription,
                metaKeywords: nextProps.metaKeywords
            });
        }
    }

    handleKeywordChange = event => {
        this.setState({
            metaKeywordsInput: event.target.value
        });
    };

    getKeywords = () => {
        const { metaKeywords, metaKeywordsInput } = this.state;
        const keyword = trim(metaKeywordsInput).replace(/\s\s+/g, ' ');
        const splittedKeyword = keyword.split(' ');
        const keywordsArray = metaKeywords ? metaKeywords.split(', ') : [];

        return [...keywordsArray, ...splittedKeyword].filter((keyword) => !!keyword).join(', ');
    };

    handleKeywordAdd = () => {
        this.setState({
            metaKeywords: this.getKeywords(),
            metaKeywordsInput: ''
        });
    };

    handleKeywordDelete = i => () => {
        const { metaKeywords } = this.state;
        const keywordsArray = metaKeywords.split(', ');
        const newKeywords = remove(i, 1, keywordsArray);

        this.setState({
            metaKeywords: newKeywords.join(', ')
        });
    };

    handleDefaultTitleAdd = () => {
        this.setState({
            metaKeywords: this.props.getAutoGenerateTitle(),
            metaKeywordsInput: ''
        });
    };

    handleDefaultDescriptionAdd = () => {
        this.setState({
            metaKeywords: this.props.getAutoGenerateDescription(),
            metaKeywordsInput: ''
        });
    };

    handleDefaultKeywordsAdd = () => {
        this.setState({
            metaKeywords: this.props.getAutoGenerateKeywords(),
            metaKeywordsInput: ''
        });
    };

    handleChange = prop => event => {
        this.setState({
            [prop]: event.target.value
        });
    };

    checkMetaDataChange = () => {
        const { metaKeywordsInput } = this.state;
        const META = ['metaTitle', 'metaDescription', 'metaKeywords'];
        let isMetaDataChanged = false;

        if (metaKeywordsInput) {
            isMetaDataChanged = true;
        } else {
            META.forEach((meta) => {
                if (this.props[meta] !== this.state[meta]) {
                    isMetaDataChanged = true;
                }
            });
        }

        return isMetaDataChanged;
    };

    handleSubmit = event => {
        event.preventDefault();
        const { metaTitle, metaDescription } = this.state;

        this.setState({
            isLoading: true,
            metaKeywordsInput: ''
        });

        this.props.onSubmit({
            metaTitle,
            metaDescription,
            metaKeywords: this.getKeywords()
        }).then(() => this.setState({ isLoading: false }));
    };

    render () {
        const { classes, metaAutoGenerate } = this.props;
        const { isLoading, metaKeywordsInput, metaTitle, metaDescription, metaKeywords } = this.state;
        const isMetaDataChanged = this.checkMetaDataChange();

        return <div className={classes.metaContainer}>
            <form onSubmit={this.handleSubmit}>
                <div className={classes.metaAddTitleDescription}>
                    <div className={classes.metaForm}>
                        <TextField
                            label='Title'
                            value={metaTitle}
                            margin='normal'
                            variant='outlined'
                            fullWidth
                            required
                            onChange={this.handleChange('metaTitle')}
                        />
                    </div>
                    {metaAutoGenerate.enabled &&
                        <div className={classes.metaAdd}>
                            <Tooltip
                                title={metaAutoGenerate.available
                                    ? 'Добавить значение по умолчанию'
                                    : 'Заполните поля "Название", "Компания" и "Цена" для добавления значения по умолчанию'}
                                placement='bottom'
                            >
                                <Fab
                                    color={metaAutoGenerate.available ? 'primary' : GREY}
                                    size='small'
                                    onClick={metaAutoGenerate.available ? this.handleDefaultTitleAdd : undefined}
                                >
                                    <AutoRenew/>
                                </Fab>
                            </Tooltip>
                        </div>
                    }
                </div>
                <div className={classes.metaAddTitleDescription}>
                    <div className={classes.metaForm}>
                        <TextField
                            label='Description'
                            value={metaDescription}
                            margin='normal'
                            variant='outlined'
                            fullWidth
                            required
                            onChange={this.handleChange('metaDescription')}
                        />
                    </div>
                    {metaAutoGenerate.enabled &&
                        <div className={classes.metaAdd}>
                            <Tooltip
                                title={metaAutoGenerate.available
                                    ? 'Добавить значение по умолчанию'
                                    : 'Заполните поля "Название", "Компания" и "Цена" для добавления значения по умолчанию'}
                                placement='bottom'
                            >
                                <Fab
                                    color={metaAutoGenerate.available ? 'primary' : GREY}
                                    size='small'
                                    onClick={metaAutoGenerate.available ? this.handleDefaultDescriptionAdd : undefined}
                                >
                                    <AutoRenew />
                                </Fab>
                            </Tooltip>
                        </div>
                    }
                </div>
                <div className={classes.metaAddKeywords}>
                    <TextField
                        label='Ключевое слова'
                        value={metaKeywordsInput}
                        margin='normal'
                        variant='outlined'
                        fullWidth
                        onChange={this.handleKeywordChange}
                    />
                    <div className={classes.metaAdd}>
                        <Tooltip title='Добавить ключевое слово' placement='bottom'>
                            <Fab size='small' color='primary' aria-label="Add" onClick={this.handleKeywordAdd}>
                                <AddIcon/>
                            </Fab>
                        </Tooltip>
                    </div>
                    {metaAutoGenerate.enabled &&
                        <div className={classes.metaAdd}>
                            <Tooltip
                                title={metaAutoGenerate.available
                                    ? 'Добавить ключевые слова по умолчанию'
                                    : metaAutoGenerate.tooltip}
                                placement='bottom'
                            >
                                <Fab
                                    size='small'
                                    color={metaAutoGenerate.available ? 'primary' : GREY}
                                    onClick={metaAutoGenerate.available ? this.handleDefaultKeywordsAdd : undefined}
                                    aria-label="Add"
                                >
                                    <AutoRenew />
                                </Fab>
                            </Tooltip>
                        </div>
                    }
                </div>
                <div className={classes.keywordsWrapper}>
                    {
                        metaKeywords && metaKeywords.split(', ').map((chip, i) => <Chip
                            key={i}
                            label={chip}
                            variant='outlined'
                            color='primary'
                            className={classes.metaKeyword}
                            onDelete={this.handleKeywordDelete(i)}
                        />)
                    }
                </div>
                <FormControl margin='normal'>
                    <Button
                        variant='contained'
                        color='primary'
                        type='submit'
                        disabled={isLoading || !isMetaDataChanged}
                    >
                        Сохранить
                    </Button>
                </FormControl>
            </form>
        </div>;
    }
}

export default withStyles(materialStyles)(MetaForm);
